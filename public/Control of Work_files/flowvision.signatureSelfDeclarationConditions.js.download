window.signatureSelfDeclarationConditions = (function() {
  // this file contains generated code for region 'Global'. Do not modify, your changes will be overwritten!!!
  /* tslint:disable:comma-dangle no-unused-variable no-unused-vars no-trailing-whitespace no-unreachable max-line-length curly comment-format no-trailing-comma */
  /* since it's possible to define more than one <selfDeclaration /> element per signature, they can be accessed by [kind]_[signatureType]_[uniqueKey]. */
  var _log;
  var log = function() {
    if (!_log) {
      _log = logger.getLoggerFor('editabilityPolicy');
    }
    _log(arguments);
  };
  var selfDeclarationsPerKind = {
    Isolation: {
      // kind: Isolation
      ConfirmAllIsolationsInPlace_selfDeclaration_0: {
        isVisible: function(cert) {
          return true;
        }
      }
    },
    IsolationTemplate: {
    },
    ManualBarrierOverride: {
    },
    ManualDataEntry: {
    },
    NonPermittedWork: {
    },
    Permit: {
      // kind: Permit
      IssuePermit_selfDeclaration_1: {
        isVisible: function(cert) {
          return true;
        }
      },
      // kind: Permit
      ReissuePermit_selfDeclaration_1: {
        isVisible: function(cert) {
          return true;
        }
      },
      // kind: Permit
      ReIssuePermitForSanctionToTest_selfDeclaration_1: {
        isVisible: function(cert) {
          return true;
        }
      }
    },
    PermitTemplate: {
    },
    RiskRecord: {
    },
    Task: {
      // kind: Task
      VerifyTask_selfDeclaration_0: {
        isVisible: function(cert) {
          return true;
        }
      }
    },
    TaskRiskAssessment: {
    },
    Training: {
    },
    WorkItemAudit: {
    },
    WorkPack: {
    }
  };
  return {
    getSelfDeclaration: function(kind, signatureType, uniqueKey) {
      const key = signatureType + '_' + uniqueKey;
      if (!(selfDeclarationsPerKind[kind]) || !(selfDeclarationsPerKind[kind][key])) {
        log('no configuration found for kind: ' + kind + ', signature: ' + signatureType + ', and key: ' + uniqueKey);
      }
      return selfDeclarationsPerKind[kind][key];
    }
  };
})();
