window.actionSelfDeclarationConditions = (function() {
  // this file contains generated code for region 'Global'. Do not modify, your changes will be overwritten!!!
  /* tslint:disable:comma-dangle no-unused-variable no-unused-vars no-trailing-whitespace no-unreachable max-line-length curly comment-format no-trailing-comma */
  /* since it's possible to define more than one <selfDeclaration /> element per signature, they can be accessed by [signatureType]_[key]. */
  var _log;
  var log = function() {
    if (!_log) {
      _log = logger.getLoggerFor('editabilityPolicy');
    }
    _log(arguments);
  };
  var selfDeclarationsPerSignature = {
    // kind: Isolation
    ConfirmAllIsolationsInPlace_Isolation_undefined_0: {
      isVisible: function(cert) {
        return true;
      }
    }
  };
  return {
    getSelfDeclaration: function(signatureType, uniqueKey) {
      const key = signatureType + '_' + uniqueKey;
      if (!(selfDeclarationsPerSignature[key])) {
        log('no configuration found for signature: ' + signatureType + ', and key: ' + uniqueKey);
      }
      return selfDeclarationsPerSignature[key];
    }
  };
})();
