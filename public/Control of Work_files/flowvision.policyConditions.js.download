window.policyConditions = (function() {
  // this file contains generated code for region 'Global'. Do not modify, your changes will be overwritten!!!
  function getPropCI(self, prop) {
    for (var key in self) {
      if (key.toLowerCase() == prop.toLowerCase()) {
        return self[key];
      }
    }
  };
  function userMatchesAnyOfAuthorities(authorityProperties, certificate, user) {
    var authorities = [];
    for (var i = 0; i < authorityProperties.length; i++) {
      authorities = authorities.concat(certificate.findAuthorities(authorityProperties[i]));
    }
    return _.some(authorities, function(authority) {
      return authority === user.identity || authority.id === user.identity;
    });
  };
  function alwaysTrue() {return true;}
  function alwaysFalse() {return false;}
  var policies = {
    getPolicy: function(kind, name) {
      const kindObj = getPropCI(policiesPerKind, kind);
      if (!kindObj) {
        throw new Error('Failed to find kind: ' + kind);
      }
      const policy = getPropCI(kindObj, name);
      if (!policy) {
        return {
          isFallback: true,
          isAllowed: function() { return false; },
          isEnabled: function() { return false; }
        };
      }
      return policy;
    },
    isAllowed: function(certificate, user, policy) {
      return this.getPolicy(certificate.kind, policy).isAllowed(certificate, user);
    }
  };
  var policiesPerKind = {
    Isolation: {
      //Isolation
      AddDeisolationAction: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      AddDeisolationRisk: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      addIsolation: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      AddIsolationAction: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      AddIsolationType: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['DraftShutdown', 'Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['AwaitingVerification']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      AddPressureMeasurement: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['MechanicalIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      AssessIsolationScheme: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      AssignDrawing: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      AssignFluidRank: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      AssignIsolationPhase: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Isolation
      AssignLocationLesson: {
        isAllowed: function (cert, user) {
          if (_.includes(['Deisolated', 'IsolationInProgressForAmendment', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment', 'DeisolationInProgress', 'IsolationInPlace', 'IsolationInPlaceForLongTerm', 'IsolationInPlaceForSanctionToTest', 'RequestedForReisolation', 'RequestedForSanctionToTest'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      AssignPid: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      AssignPieceOfEquipmentLesson: {
        isAllowed: function (cert, user) {
          if (_.includes(['Deisolated', 'IsolationInProgressForAmendment', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment', 'DeisolationInProgress', 'IsolationInPlace', 'IsolationInPlaceForLongTerm', 'IsolationInPlaceForSanctionToTest', 'RequestedForReisolation', 'RequestedForSanctionToTest'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      assignRoleAuthority: {
      },
      //Isolation
      AssignSystemLesson: {
        isAllowed: function (cert, user) {
          if (_.includes(['Deisolated', 'IsolationInProgressForAmendment', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment', 'DeisolationInProgress', 'IsolationInPlace', 'IsolationInPlaceForLongTerm', 'IsolationInPlaceForSanctionToTest', 'RequestedForReisolation', 'RequestedForSanctionToTest'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      assignUserAuthority: {
      },
      //Isolation
      assignWorkingLocations: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['DraftShutdown', 'Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['AwaitingVerification']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      AssociateListedWorkObjectWithWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['DraftShutdown', 'Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester', 'PermitVerifier'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['AwaitingVerification']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      AssociateUnlistedWorkObjectWithWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['DraftShutdown', 'Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester', 'PermitVerifier'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      associateWithIsolationPhase: {
      },
      //Isolation
      AttachLinkedFile: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['Pid', 'Procedures', 'Drawing', 'Loa', 'Stt', 'Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //Isolation
      AttachUploadedFile: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['Pid', 'Procedures', 'Drawing', 'Loa', 'Stt', 'Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //Isolation
      attachWorkItems: {
        taskriskassessment: {
          states: ['Requesting'],
          variants: [],
          forbiddenStates: [],
          parentStates: ["Requesting","RequestedForAmendment"],
          parentVariants: ["*"],
          allowedFromAnotherSite: false,
          checkPolicyForAttachment: function(cert, user) {
            return _.some(['Requesting'], function(s) {
              return s === cert.state;
            });
          },
          checkPolicyForParentCertificate: function(_cert, _user) {
            function allowMultipleAttachmentsOfKind(cert, user) {
              if (['Isolation'].indexOf(cert.kind) >= 0 && _.some(cert.attachments, function(attachment) { return attachment.kind === 'TaskRiskAssessment'; })) {
                return false;
              }
              return true;
            }
            const policies = function (cert, user) {
              if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
                return true;
              }
              return false;
            };
            return allowMultipleAttachmentsOfKind(_cert, _user) && policies(_cert, _user);
          },
          initializationTasks: []
        }
      },
      //Isolation
      AuditLti: {
        isAllowed: function (cert, user) {
          if (_.includes(['IsolationInPlaceForLongTerm'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      ChangeLessonDescription: {
        isAllowed: function (cert, user) {
          if (_.includes(['Deisolated', 'IsolationInProgressForAmendment', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment', 'DeisolationInProgress', 'IsolationInPlace', 'IsolationInPlaceForLongTerm', 'IsolationInPlaceForSanctionToTest', 'RequestedForReisolation', 'RequestedForSanctionToTest'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      ClearPressureBuildupPointMarkFromIsolation: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      ClearSanctionToTestMarkFromIsolation: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      CloseIsolationCertificate: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Isolation
      CommentDeisolation: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      CommentIsolation: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      CopyAsTemplate: {
        isAllowed: function (cert, user) {
          if (_.includes(['Deisolated', 'DeisolationInProgress', 'IsolationInPlace', 'IsolationInPlaceForLongTerm', 'IsolationInPlaceForSanctionToTest', 'RequestedForReisolation', 'RequestedForSanctionToTest', 'Closed'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      CopyIsolationCertificate: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      CorrectIsolation: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      CorrectIsolationActionListedEquipment: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      CorrectIsolationActionUnlistedEquipment: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      CorrectIsolationListedEquipment: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      CorrectIsolationTagNumber: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      CorrectIsolationType: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      CorrectIsolationUnlistedEquipment: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      CorrectTitle: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['DraftShutdown', 'Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['AwaitingVerification']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      CorrectVariant: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      CreateIsolationCertificate: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['DraftShutdown', 'Requesting']) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['AwaitingVerification']) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site)) {
            return true;
          }
          if (userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      CreateLessonForWorkItem: {
        isAllowed: function (cert, user) {
          if (_.includes(['Deisolated', 'IsolationInProgressForAmendment', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment', 'DeisolationInProgress', 'IsolationInPlace', 'IsolationInPlaceForLongTerm', 'IsolationInPlaceForSanctionToTest', 'RequestedForReisolation', 'RequestedForSanctionToTest'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      deleteWorkItem: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['IsolationManager'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['Requesting', 'DraftShutdown']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['AwaitingVerification']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('WorkPack') && cert.hasParentInState(['Requesting', 'RequestedForAmendment']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      DescribeDeisolationAction: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      DescribeIsolationAction: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      DescribeWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['DraftShutdown', 'Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['AwaitingVerification']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      disassociateFromIsolationPhase: {
      },
      //Isolation
      DisassociateListedWorkObjectFromWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['DraftShutdown', 'Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester', 'PermitVerifier'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      DisassociateUnlistedWorkObjectFromWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['DraftShutdown', 'Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester', 'PermitVerifier'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      managedDescriptorProperties: {
      },
      //Isolation
      MarkAsCopyable: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Isolation
      MarkAsNotPlannedInShutdown: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['DraftShutdown', 'Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['AwaitingVerification']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      MarkAsPlannedInShutdown: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['DraftShutdown', 'Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['AwaitingVerification']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      MarkIsolationAsPressureBuildupPoint: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      MarkIsolationForSanctionToTest: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      multiValueProperties: {
      },
      //Isolation
      printing: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Isolation
      RemoveApplicableObjectsFromLesson: {
        isAllowed: function (cert, user) {
          if (_.includes(['Deisolated', 'IsolationInProgressForAmendment', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment', 'DeisolationInProgress', 'IsolationInPlace', 'IsolationInPlaceForLongTerm', 'IsolationInPlaceForSanctionToTest', 'RequestedForReisolation', 'RequestedForSanctionToTest'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      removeAssignedRoleAuthority: {
      },
      //Isolation
      removeAssignedUserAuthority: {
      },
      //Isolation
      RemoveFileAttachment: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Isolation
      RemoveIsolationAction: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        blockRemovingUti: false,
      },
      //Isolation
      RemoveIsolationPoint: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        blockRemovingUti: false,
      },
      //Isolation
      RemoveIsolationType: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      RemoveLesson: {
        isAllowed: function (cert, user) {
          if (_.includes(['Deisolated', 'IsolationInProgressForAmendment', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment', 'DeisolationInProgress', 'IsolationInPlace', 'IsolationInPlaceForLongTerm', 'IsolationInPlaceForSanctionToTest', 'RequestedForReisolation', 'RequestedForSanctionToTest'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      ReorderDeisolationInstructions: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['DraftShutdown', 'Requesting']) && _.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['AwaitingVerification']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site)) {
            return true;
          }
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      ReorderIsolationInstructions: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      RequestDeisolationInstructions: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Isolation
      RequestDeisolations: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Isolation
      RequestIsolationInstructions: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Isolation
      RequestIsolations: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Isolation
      revertState: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['IsolationManager'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingAuthorisation'], cert.state) && userAuthorization.isInRoleForSite(user, ['IsolationSupervisor'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingVerificationForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['IsolationManager'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingAuthorisationForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['IsolationSupervisor'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        reasonRequirement: 'Required',
      },
      //Isolation
      ReviewLti: {
        isAllowed: function (cert, user) {
          if (_.includes(['IsolationInPlaceForLongTerm'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      SetReviewDate: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Isolation
      SuspendPermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Isolation
      textProperties: {
        "LockOutBox":
        {
          isAllowed: function (cert, user) {
            if (_.includes(['Requesting', 'AwaitingAuthorisation', 'AwaitingVerification', 'IsolationInProgress', 'RequestedForAmendment', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment', 'IsolationInProgressForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority', 'IsolationSupervisor'], cert.site)) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
        }
      },
      //Isolation
      unlinkAndDeleteWorkItem: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['DraftShutdown', 'Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['AwaitingVerification']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('WorkPack') && cert.hasParentInState(['Requesting', 'RequestedForAmendment']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Isolation
      unlinkWorkItemAttachment : {
      },
      //Isolation
      ValidatePermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      }
    },
    IsolationTemplate: {
      //IsolationTemplate
      AddDeisolationAction: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      AddDeisolationRisk: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      addIsolation: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      AddIsolationAction: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      AddIsolationType: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      AddPressureMeasurement: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['MechanicalIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      AssessIsolationScheme: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      AssignDrawing: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      AssignFluidRank: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      AssignIsolationPhase: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      AssignPid: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      assignRoleAuthority: {
      },
      //IsolationTemplate
      assignUserAuthority: {
      },
      //IsolationTemplate
      assignWorkingLocations: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('PermitTemplate') && cert.hasParentInState(['Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('PermitTemplate') && cert.hasParentInState(['AwaitingVerification']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateVerifier'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      AssociateListedWorkObjectWithWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('PermitTemplate') && cert.hasParentInState(['Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('PermitTemplate') && cert.hasParentInState(['AwaitingVerification']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateVerifier'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      AssociateUnlistedWorkObjectWithWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('PermitTemplate') && cert.hasParentInState(['Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('PermitTemplate') && cert.hasParentInState(['AwaitingVerification']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateVerifier'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      associateWithIsolationPhase: {
      },
      //IsolationTemplate
      AttachLinkedFile: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['Pid', 'Procedures', 'Drawing', 'Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //IsolationTemplate
      AttachUploadedFile: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['Pid', 'Procedures', 'Drawing', 'Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //IsolationTemplate
      attachWorkItems: {
      },
      //IsolationTemplate
      ClearPressureBuildupPointMarkFromIsolation: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      ClearSanctionToTestMarkFromIsolation: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      CloseIsolationCertificate: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      CommentDeisolation: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      CommentIsolation: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      CopyIsolationCertificate: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      CorrectIsolation: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      CorrectIsolationActionListedEquipment: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      CorrectIsolationActionUnlistedEquipment: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      CorrectIsolationListedEquipment: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      CorrectIsolationTagNumber: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      CorrectIsolationType: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      CorrectIsolationUnlistedEquipment: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      CorrectTitle: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('PermitTemplate') && cert.hasParentInState(['Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('PermitTemplate') && cert.hasParentInState(['AwaitingVerification']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateVerifier'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      CorrectVariant: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      CreateIsolationCertificate: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('PermitTemplate') && cert.hasParentInState(['Requesting']) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('PermitTemplate') && cert.hasParentInState(['AwaitingVerification']) && userAuthorization.isInRoleForSite(user, ['PermitTemplateVerifier'], cert.site)) {
            return true;
          }
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      deleteWorkItem: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['IsolationTemplateVerifier'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['IsolationTemplateApprover'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('PermitTemplate') && cert.hasParentInState(['Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('PermitTemplate') && cert.hasParentInState(['Requesting', 'AwaitingVerification']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateVerifier'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      DescribeDeisolationAction: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      DescribeIsolationAction: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      DescribeWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('PermitTemplate') && cert.hasParentInState(['Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('PermitTemplate') && cert.hasParentInState(['AwaitingVerification']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateVerifier'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      disassociateFromIsolationPhase: {
      },
      //IsolationTemplate
      DisassociateListedWorkObjectFromWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('PermitTemplate') && cert.hasParentInState(['Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('PermitTemplate') && cert.hasParentInState(['AwaitingVerification']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateVerifier'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      DisassociateUnlistedWorkObjectFromWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('PermitTemplate') && cert.hasParentInState(['Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      managedDescriptorProperties: {
      },
      //IsolationTemplate
      MarkAsCopyable: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      MarkIsolationAsPressureBuildupPoint: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      MarkIsolationForSanctionToTest: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      multiValueProperties: {
      },
      //IsolationTemplate
      removeAssignedRoleAuthority: {
      },
      //IsolationTemplate
      removeAssignedUserAuthority: {
      },
      //IsolationTemplate
      RemoveFileAttachment: {
        isAllowed: function (cert, user) {
          if (_.includes(['InReview', 'Active', 'Requesting', 'AwaitingVerification', 'AwaitingApproval'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      RemoveIsolationAction: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        blockRemovingUti: false,
      },
      //IsolationTemplate
      RemoveIsolationPoint: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        blockRemovingUti: false,
      },
      //IsolationTemplate
      RemoveIsolationType: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      ReorderDeisolationInstructions: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      ReorderIsolationInstructions: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolationTemplateAuthority', 'ElectricalLowVoltageIsolationTemplateAuthority', 'MechanicalIsolationTemplateAuthority', 'InhibitsAndOverridesIsolationTemplateAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      RequestDeisolationInstructions: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      RequestIsolationInstructions: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      RequestIsolations: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      revertState: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['IsolationTemplateVerifier'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['IsolationTemplateApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        reasonRequirement: 'Required',
      },
      //IsolationTemplate
      SetReviewDate: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      SuspendPermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      textProperties: {
      },
      //IsolationTemplate
      unlinkAndDeleteWorkItem: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('PermitTemplate') && cert.hasParentInState(['Requesting']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('PermitTemplate') && cert.hasParentInState(['AwaitingVerification']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateVerifier'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //IsolationTemplate
      unlinkWorkItemAttachment : {
      },
      //IsolationTemplate
      ValidatePermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      }
    },
    ManualBarrierOverride: {
      //ManualBarrierOverride
      addMeasurements: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['GasTester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        detectorNumberUsage: 'Optional',
      },
      //ManualBarrierOverride
      AddPressureMeasurement: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['MechanicalIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //ManualBarrierOverride
      assignRoleAuthority: {
      },
      //ManualBarrierOverride
      assignUserAuthority: {
      },
      //ManualBarrierOverride
      assignWorkingLocations: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualBarrierOverrideAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //ManualBarrierOverride
      assignWorkingPeriod: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualBarrierOverrideAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        kindsForWhichToIgnoreWorkingHours: 'ManualDataEntry, RiskRecord, ManualBarrierOverride',
      },
      //ManualBarrierOverride
      associateWithIsolationPhase: {
      },
      //ManualBarrierOverride
      AttachLinkedFile: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'AwaitingApproval', 'Active', 'Revalidate'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //ManualBarrierOverride
      AttachUploadedFile: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'AwaitingApproval', 'Active', 'Revalidate'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //ManualBarrierOverride
      attachWorkItems: {
      },
      //ManualBarrierOverride
      CopyAsTemplate: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingApproval', 'Active', 'Revalidate', 'Closed'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualBarrierOverrideAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //ManualBarrierOverride
      copyPermit: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['ManualBarrierOverrideAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        allowCrossSite: true,
      },
      //ManualBarrierOverride
      CorrectTitle: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualBarrierOverrideAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //ManualBarrierOverride
      CreatePermit: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['ManualBarrierOverrideAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //ManualBarrierOverride
      DefineLifetimePeriod: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['ManualBarrierOverrideAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //ManualBarrierOverride
      deleteWorkItem: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualBarrierOverrideAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //ManualBarrierOverride
      DescribeWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualBarrierOverrideAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //ManualBarrierOverride
      disassociateFromIsolationPhase: {
      },
      //ManualBarrierOverride
      managedDescriptorProperties: {
        "SafeguardCategoryField":
        {
          isAllowed: function (cert, user) {
            if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualBarrierOverrideAuthority'], cert.site)) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
          descriptorType: 'SafeguardCategory',
        },
        "CurrentSafeguardStatusField":
        {
          isAllowed: function (cert, user) {
            if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualBarrierOverrideAuthority'], cert.site)) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
          descriptorType: 'SafeguardStatus',
        },
        "OverrideSafeguardStatusField":
        {
          isAllowed: function (cert, user) {
            if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualBarrierOverrideAuthority'], cert.site)) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
          descriptorType: 'SafeguardStatus',
        }
      },
      //ManualBarrierOverride
      MarkAsCopyable: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //ManualBarrierOverride
      multiValueProperties: {
      },
      //ManualBarrierOverride
      removeAssignedRoleAuthority: {
      },
      //ManualBarrierOverride
      removeAssignedUserAuthority: {
      },
      //ManualBarrierOverride
      RemoveFileAttachment: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //ManualBarrierOverride
      revertState: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualBarrierOverrideAuthority', 'ManualBarrierOverrideOwner'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        reasonRequirement: 'Required',
      },
      //ManualBarrierOverride
      SetReviewDate: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //ManualBarrierOverride
      SuspendPermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //ManualBarrierOverride
      textProperties: {
      },
      //ManualBarrierOverride
      unlinkWorkItemAttachment : {
      },
      //ManualBarrierOverride
      ValidatePermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      }
    },
    ManualDataEntry: {
      //ManualDataEntry
      addMeasurements: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['GasTester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        detectorNumberUsage: 'Optional',
      },
      //ManualDataEntry
      AddPressureMeasurement: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['MechanicalIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //ManualDataEntry
      assignRoleAuthority: {
      },
      //ManualDataEntry
      assignUserAuthority: {
      },
      //ManualDataEntry
      assignWorkingLocations: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualDataEntryAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //ManualDataEntry
      assignWorkingPeriod: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualDataEntryAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        kindsForWhichToIgnoreWorkingHours: 'ManualDataEntry, RiskRecord, ManualBarrierOverride',
      },
      //ManualDataEntry
      associateWithIsolationPhase: {
      },
      //ManualDataEntry
      AttachLinkedFile: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'AwaitingApproval', 'Active', 'Revalidate', 'Closing'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //ManualDataEntry
      AttachUploadedFile: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'AwaitingApproval', 'Active', 'Revalidate', 'Closing'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //ManualDataEntry
      attachWorkItems: {
      },
      //ManualDataEntry
      CopyAsTemplate: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingApproval', 'Active', 'Revalidate', 'Closing', 'Closed'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualDataEntryAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //ManualDataEntry
      copyPermit: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['ManualDataEntryAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        allowCrossSite: true,
      },
      //ManualDataEntry
      CorrectTitle: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualDataEntryAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //ManualDataEntry
      CreatePermit: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['ManualDataEntryAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //ManualDataEntry
      DefineLifetimePeriod: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['ManualDataEntryAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //ManualDataEntry
      deleteWorkItem: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualDataEntryAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //ManualDataEntry
      DescribeWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualDataEntryAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //ManualDataEntry
      disassociateFromIsolationPhase: {
      },
      //ManualDataEntry
      managedDescriptorProperties: {
        "MetricTypeField":
        {
          isAllowed: function (cert, user) {
            if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualDataEntryAuthority'], cert.site)) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
          descriptorType: 'MetricType',
        }
      },
      //ManualDataEntry
      MarkAsCopyable: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //ManualDataEntry
      multiValueProperties: {
        "DateRangeRequired":
        {
          isAllowed: function (cert, user) {
            if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualDataEntryAuthority'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
        }
      },
      //ManualDataEntry
      removeAssignedRoleAuthority: {
      },
      //ManualDataEntry
      removeAssignedUserAuthority: {
      },
      //ManualDataEntry
      RemoveFileAttachment: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //ManualDataEntry
      revertState: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualDataEntryAuthority', 'ManualDataEntryApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        reasonRequirement: 'Required',
      },
      //ManualDataEntry
      SetReviewDate: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //ManualDataEntry
      SuspendPermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //ManualDataEntry
      textProperties: {
        "ValueTextField":
        {
          isAllowed: function (cert, user) {
            if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['ManualDataEntryAuthority'], cert.site)) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
        }
      },
      //ManualDataEntry
      unlinkWorkItemAttachment : {
      },
      //ManualDataEntry
      ValidatePermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      }
    },
    NonPermittedWork: {
      //NonPermittedWork
      AddControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      AssignInitialRisk: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      assignPermitNumberOfPersons: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        minimumNumberOfPersons: '1',
        maximumNumberOfPersons: '999',
      },
      //NonPermittedWork
      AssignResidualRisk: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      assignRiskAssessmentLevel: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        allowMultipleRiskAssessmentTasksFor: 'Level2',
      },
      //NonPermittedWork
      assignRoleAuthority: {
      },
      //NonPermittedWork
      assignUserAuthority: {
      },
      //NonPermittedWork
      assignWorkingLocations: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //NonPermittedWork
      assignWorkingPeriod: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //NonPermittedWork
      associateWithIsolationPhase: {
      },
      //NonPermittedWork
      AttachLinkedFile: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'AwaitingApproval', 'AwaitingActivation', 'Revalidate', 'Expired', 'Active'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //NonPermittedWork
      AttachUploadedFile: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'AwaitingApproval', 'AwaitingActivation', 'Revalidate', 'Expired', 'Active'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //NonPermittedWork
      attachWorkItems: {
      },
      //NonPermittedWork
      ChangeListedControlMeasureProperties: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      ChangeRiskAssessmentTaskListedHazardProperties: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      copyPermit: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingApproval', 'AwaitingActivation', 'Revalidate', 'Expired', 'Active', 'Closed'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        allowCrossSite: true,
      },
      //NonPermittedWork
      CorrectRiskAssessmentTaskDescription: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      CorrectTitle: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //NonPermittedWork
      CorrectVariant: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //NonPermittedWork
      CreatePermit: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //NonPermittedWork
      DefineLifetimePeriod: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //NonPermittedWork
      deleteWorkItem: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('WorkPack') && cert.hasParentInState(['Requesting', 'RequestedForAmendment']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //NonPermittedWork
      DescribeWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //NonPermittedWork
      disassociateFromIsolationPhase: {
      },
      //NonPermittedWork
      IdentifyListedHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      IdentifyNonApplicableHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      IdentifyRiskAssessmentHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      IdentifyRiskAssessmentTask: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      identifyUnlistedHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      IdentifyUnlistedRiskAssessmentControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      IdentifyUnlistedRiskAssessmentHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      managedDescriptorProperties: {
      },
      //NonPermittedWork
      MarkAsCopyable: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //NonPermittedWork
      MarkControlMeasureAsPrerequisite: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      MarkControlMeasureAsSupplementary: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      multiValueProperties: {
        "RiskAssessmentRequired":
        {
          isAllowed: function (cert, user) {
            if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
              return true;
            }
            if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
        }
      },
      //NonPermittedWork
      printing: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //NonPermittedWork
      removeAssignedRoleAuthority: {
      },
      //NonPermittedWork
      removeAssignedUserAuthority: {
      },
      //NonPermittedWork
      RemoveControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      RemoveFileAttachment: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'AwaitingApproval', 'AwaitingActivation', 'Revalidate', 'Expired', 'Active'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //NonPermittedWork
      RemoveHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      RemoveIdentifiedRiskAssessmentHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      RemovePermitDependency: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //NonPermittedWork
      removeRiskAssessmentControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      RemoveRiskAssessmentTask: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      ReorderRiskAssessmentTasks: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      revertState: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        reasonRequirement: 'Required',
      },
      //NonPermittedWork
      SelectListedRiskAssessmentControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.riskAssessmentLevel === 'Level1')) {
            return false;
          }
          return true;
        },
      },
      //NonPermittedWork
      SuspendPermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //NonPermittedWork
      textProperties: {
        "NPWAdditionalComments":
        {
          isAllowed: function (cert, user) {
            if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWRequester'], cert.site)) {
              return true;
            }
            if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['NPWApprover'], cert.site)) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
        }
      },
      //NonPermittedWork
      unlinkAndDeleteWorkItem: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('WorkPack') && cert.hasParentInState(['Requesting', 'RequestedForAmendment']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //NonPermittedWork
      unlinkWorkItemAttachment : {
      },
      //NonPermittedWork
      ValidatePermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      }
    },
    Permit: {
      //Permit
      addApprovingRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        allowedRoles: 'JHATeamMember',
      },
      //Permit
      AddContractedRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      AddControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingAuthorisation'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitAuthoriser'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      addMeasurements: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['GasTester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        detectorNumberUsage: 'Optional',
        canAddMeasurementsForAdditionalSubstances: true,
      },
      //Permit
      AddPressureMeasurement: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['MechanicalIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      AddUnlistedRequiredMeasurements: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['Requesting', 'DraftShutdown'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (userAuthorization.isInRoleForSite(user, ['GasTester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      AssignAffectedLocations: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      AssignDiscipline: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      AssignInitialRisk: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      AssignIntervalForRequiredMeasurements: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['Requesting', 'DraftShutdown'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      AssignIntervalForRequiredUnlistedMeasurements: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['Requesting', 'DraftShutdown'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (userAuthorization.isInRoleForSite(user, ['GasTester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      AssignLocationLesson: {
        isAllowed: function (cert, user) {
          if (_.includes(['Active', 'ActiveForSanctionToTest', 'AwaitingActivation', 'AwaitingActivationForSanctionToTest', 'Closed', 'Closing', 'ReIssued', 'ReIssuedForSanctionToTest', 'Revalidate', 'SuspendedForEmergency', 'SuspendedForRevalidation', 'SuspendedForSanctionToTest', 'SuspensionInProgress', 'Expired'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      assignPermitNumberOfPersons: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        minimumNumberOfPersons: '1',
        maximumNumberOfPersons: '999',
      },
      //Permit
      AssignPieceOfEquipmentLesson: {
        isAllowed: function (cert, user) {
          if (_.includes(['Active', 'ActiveForSanctionToTest', 'AwaitingActivation', 'AwaitingActivationForSanctionToTest', 'Closed', 'Closing', 'ReIssued', 'ReIssuedForSanctionToTest', 'Revalidate', 'SuspendedForEmergency', 'SuspendedForRevalidation', 'SuspendedForSanctionToTest', 'SuspensionInProgress', 'Expired'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      AssignRequiredMeasurements: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['Requesting', 'DraftShutdown'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      AssignResidualRisk: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      assignRiskAssessmentLevel: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        allowMultipleRiskAssessmentTasksFor: 'Level2',
      },
      //Permit
      assignRoleAuthority: {
      },
      //Permit
      AssignSystemLesson: {
        isAllowed: function (cert, user) {
          if (_.includes(['Active', 'ActiveForSanctionToTest', 'AwaitingActivation', 'AwaitingActivationForSanctionToTest', 'Closed', 'Closing', 'ReIssued', 'ReIssuedForSanctionToTest', 'Revalidate', 'SuspendedForEmergency', 'SuspendedForRevalidation', 'SuspendedForSanctionToTest', 'SuspensionInProgress', 'Expired'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      assignUserAuthority: {
      },
      //Permit
      assignWorkingLocations: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      assignWorkingPeriod: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        kindsForWhichToIgnoreWorkingHours: 'ManualDataEntry, RiskRecord, ManualBarrierOverride',
      },
      //Permit
      AssignWorkOrder: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      AssignWorkOrderOperation: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['WorkOrder'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      AssociateListedWorkObjectWithWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      AssociateUnlistedWorkObjectWithWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      associateWithIsolationPhase: {
      },
      //Permit
      AttachLinkedFile: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingIssue', 'AwaitingActivation', 'Active', 'SuspensionInProgress', 'SuspendedForEmergency', 'Closing', 'Revalidate', 'Expired', 'AwaitingActivationForSanctionToTest', 'ActiveForSanctionToTest', 'SuspendedForRevalidation', 'SuspendedForSanctionToTest'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['RescuePlan', 'LiftingPlan', 'Pid', 'Procedures', 'ExternalRa', 'SDS', 'Drawing', 'Certificate', 'Coshh', 'ManualHandlingRa', 'Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //Permit
      AttachUploadedFile: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingIssue', 'AwaitingActivation', 'Active', 'SuspensionInProgress', 'SuspendedForEmergency', 'Closing', 'Revalidate', 'Expired', 'AwaitingActivationForSanctionToTest', 'ActiveForSanctionToTest', 'SuspendedForRevalidation', 'SuspendedForSanctionToTest'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['RescuePlan', 'LiftingPlan', 'Pid', 'Procedures', 'ExternalRa', 'SDS', 'Drawing', 'Certificate', 'Coshh', 'ManualHandlingRa', 'Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //Permit
      attachWorkItems: {
        isolation: {
          states: ['Requesting', 'AwaitingVerification', 'AwaitingAuthorisation', 'IsolationInProgress', 'IsolationInPlace', 'RequestedForAmendment', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment', 'IsolationInProgressForAmendment'],
          variants: [],
          forbiddenStates: [],
          parentStates: ["DraftShutdown","Requesting","AwaitingVerification"],
          parentVariants: ["*","*"],
          allowedFromAnotherSite: false,
          checkPolicyForAttachment: function(cert, user) {
            return _.some(['Requesting', 'AwaitingVerification', 'AwaitingAuthorisation', 'IsolationInProgress', 'IsolationInPlace', 'RequestedForAmendment', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment', 'IsolationInProgressForAmendment'], function(s) {
              return s === cert.state;
            });
          },
          checkPolicyForParentCertificate: function(_cert, _user) {
            function allowMultipleAttachmentsOfKind(cert, user) {
              if ([].indexOf(cert.kind) >= 0 && _.some(cert.attachments, function(attachment) { return attachment.kind === 'Isolation'; })) {
                return false;
              }
              return true;
            }
            const policies = function (cert, user) {
              if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
                return true;
              }
              if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site)) {
                return true;
              }
              return false;
            };
            return allowMultipleAttachmentsOfKind(_cert, _user) && policies(_cert, _user);
          },
          initializationTasks: [{"name":"copyParentLocation"},{"name":"copyParentEquipment"},{"name":"copyParentTitle"}]
        }
      },
      //Permit
      ChangeLessonDescription: {
        isAllowed: function (cert, user) {
          if (_.includes(['Active', 'ActiveForSanctionToTest', 'AwaitingActivation', 'AwaitingActivationForSanctionToTest', 'Closed', 'Closing', 'ReIssued', 'ReIssuedForSanctionToTest', 'Revalidate', 'SuspendedForEmergency', 'SuspendedForRevalidation', 'SuspendedForSanctionToTest', 'SuspensionInProgress', 'Expired'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      ChangeListedControlMeasureProperties: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      ChangeRiskAssessmentTaskListedHazardProperties: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      ClassifyAreaHazardousness: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      CompleteCertificateWithQuestionnaireRecommendations: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      CopyAsTemplate: {
        isAllowed: function (cert, user) {
          if (_.includes(['Active', 'ActiveForSanctionToTest', 'AwaitingActivation', 'Closed', 'Closing', 'ReIssued', 'ReIssuedForSanctionToTest', 'Revalidate', 'SuspendedForEmergency', 'SuspendedForRevalidation', 'SuspendedForSanctionToTest', 'SuspensionInProgress', 'Expired', 'AwaitingAuthorisation', 'AwaitingActivationForSanctionToTest'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      copyPermit: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        allowCrossSite: true,
      },
      //Permit
      CorrectPermitIsolationRequirement: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'DraftShutdown'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      CorrectRiskAssessmentTaskDescription: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      CorrectTitle: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      CorrectVariant: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      CreateCertificateTaskFromWorkOrderOperation: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['WorkOrder'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      CreateLessonForWorkItem: {
        isAllowed: function (cert, user) {
          if (_.includes(['Active', 'ActiveForSanctionToTest', 'AwaitingActivation', 'AwaitingActivationForSanctionToTest', 'Closed', 'Closing', 'ReIssued', 'ReIssuedForSanctionToTest', 'Revalidate', 'SuspendedForEmergency', 'SuspendedForRevalidation', 'SuspendedForSanctionToTest', 'SuspensionInProgress', 'Expired'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      CreatePermit: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      DefineLifetimePeriod: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Permit
      deleteWorkItem: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingAuthorisation'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitAuthoriser'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('WorkPack') && cert.hasParentInState(['Requesting', 'RequestedForAmendment']) && _.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      DescribeWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      disassociateFromIsolationPhase: {
      },
      //Permit
      DisassociateListedWorkObjectFromWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      DisassociateUnlistedWorkObjectFromWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      IdentifyListedHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingAuthorisation'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitAuthoriser'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      IdentifyNonApplicableHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      IdentifyRiskAssessmentHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      IdentifyRiskAssessmentTask: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      identifyUnlistedHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingAuthorisation'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitAuthoriser'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      IdentifyUnlistedRiskAssessmentControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      IdentifyUnlistedRiskAssessmentHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      managedDescriptorProperties: {
      },
      //Permit
      MarkAsCopyable: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Permit
      MarkAsNotPlannedInShutdown: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      MarkAsOriginatingFromWorkOrder: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      MarkAsPlannedInShutdown: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      MarkControlMeasureAsPrerequisite: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      MarkControlMeasureAsSupplementary: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      multiValueProperties: {
      },
      //Permit
      printing: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Permit
      RemoveApplicableObjectsFromLesson: {
        isAllowed: function (cert, user) {
          if (_.includes(['Active', 'ActiveForSanctionToTest', 'AwaitingActivation', 'AwaitingActivationForSanctionToTest', 'Closed', 'Closing', 'ReIssued', 'ReIssuedForSanctionToTest', 'Revalidate', 'SuspendedForEmergency', 'SuspendedForRevalidation', 'SuspendedForSanctionToTest', 'SuspensionInProgress', 'Expired'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      RemoveApprovingRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      removeAssignedRoleAuthority: {
      },
      //Permit
      removeAssignedUserAuthority: {
      },
      //Permit
      RemoveContractedRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      RemoveControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingAuthorisation'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitAuthoriser'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      RemoveFileAttachment: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingIssue', 'AwaitingActivation', 'Active', 'SuspensionInProgress', 'SuspendedForEmergency', 'Closing', 'Revalidate', 'Expired', 'AwaitingActivationForSanctionToTest', 'ActiveForSanctionToTest', 'SuspendedForRevalidation', 'SuspendedForSanctionToTest'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      RemoveHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingAuthorisation'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitAuthoriser'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      RemoveIdentifiedRiskAssessmentHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      RemoveLesson: {
        isAllowed: function (cert, user) {
          if (_.includes(['Active', 'ActiveForSanctionToTest', 'AwaitingActivation', 'AwaitingActivationForSanctionToTest', 'Closed', 'Closing', 'ReIssued', 'ReIssuedForSanctionToTest', 'Revalidate', 'SuspendedForEmergency', 'SuspendedForRevalidation', 'SuspendedForSanctionToTest', 'SuspensionInProgress', 'Expired'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      RemovePermitDependency: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester', 'WorkPackRequester', 'WorkPackAuthoriser'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier', 'WorkPackRequester', 'WorkPackAuthoriser'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingAuthorisation'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitAuthoriser', 'WorkPackRequester', 'WorkPackAuthoriser'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      removeRiskAssessmentControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      RemoveRiskAssessmentTask: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      ReorderRiskAssessmentTasks: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      revertState: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingAuthorisation'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitAuthoriser'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingIssue'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitIssuer'], cert.site)) {
            return true;
          }
          if (_.includes(['Issued'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitIssuer', 'PermitHolder'], cert.site)) {
            return true;
          }
          if (_.includes(['ReIssued'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitIssuer', 'PermitHolder'], cert.site)) {
            return true;
          }
          if (_.includes(['ReIssuedForSanctionToTest'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitIssuer', 'PermitHolder'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        reasonRequirement: 'Required',
      },
      //Permit
      SelectListedRiskAssessmentControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      SetReviewDate: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Permit
      SuspendPermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Permit
      textProperties: {
        "ToolsToBeUsed":
        {
          isAllowed: function (cert, user) {
            if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
        }
      },
      //Permit
      unlinkAndDeleteWorkItem: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('WorkPack') && cert.hasParentInState(['Requesting', 'RequestedForAmendment']) && _.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      unlinkWorkItemAttachment : {
        isolation: {
          states: [],
          variants: [],
          forbiddenStates: [],
          parentStates: ["DraftShutdown","Requesting","AwaitingVerification"],
          parentVariants: ["*","*"],
          allowedFromAnotherSite: false,
          checkPolicyForAttachment: function(cert, user) {
            return true;
          },
          checkPolicyForParentCertificate: function(_cert, _user) {
            const policies = function (cert, user) {
              if (_.includes(['DraftShutdown', 'Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
                return true;
              }
              if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site)) {
                return true;
              }
              return false;
            };
            return policies(_cert, _user);
          },
          initializationTasks: []
        }
      },
      //Permit
      updatePermitWorkStatus: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
        validStatuses: 'Complete, Incomplete',
      },
      //Permit
      UpdateUnlistedRequiredMeasurements: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitVerifier'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (_.includes(['Requesting', 'DraftShutdown'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site) && !(cert.origins && _.some(cert.origins, function(origin) { return _.some(['Template'], function(except) { return origin === except; }); }))) {
            return true;
          }
          if (userAuthorization.isInRoleForSite(user, ['GasTester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Permit
      ValidatePermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      }
    },
    PermitTemplate: {
      //PermitTemplate
      addApprovingRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        allowedRoles: 'JHATeamMember',
      },
      //PermitTemplate
      AddContractedRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      AddControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      addMeasurements: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['GasTester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        detectorNumberUsage: 'Optional',
      },
      //PermitTemplate
      AddPressureMeasurement: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['MechanicalIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      AssignAffectedLocations: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      AssignDiscipline: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      AssignInitialRisk: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      AssignIntervalForRequiredMeasurements: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateVerifier'], cert.site)) {
            return true;
          }
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      assignPermitNumberOfPersons: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        minimumNumberOfPersons: '1',
        maximumNumberOfPersons: '999',
      },
      //PermitTemplate
      AssignRequiredMeasurements: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateVerifier'], cert.site)) {
            return true;
          }
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      AssignResidualRisk: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      assignRiskAssessmentLevel: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        allowMultipleRiskAssessmentTasksFor: 'Level2',
      },
      //PermitTemplate
      assignRoleAuthority: {
      },
      //PermitTemplate
      assignUserAuthority: {
      },
      //PermitTemplate
      assignWorkingLocations: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      AssignWorkOrder: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      AssociateListedWorkObjectWithWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      AssociateUnlistedWorkObjectWithWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      associateWithIsolationPhase: {
      },
      //PermitTemplate
      AttachLinkedFile: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'AwaitingVerification', 'AwaitingApproval', 'Active', 'InReview'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['RescuePlan', 'LiftingPlan', 'Pid', 'Procedures', 'ExternalRa', 'SDS', 'Drawing', 'Certificate', 'Coshh', 'ManualHandlingRa', 'Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //PermitTemplate
      AttachUploadedFile: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'AwaitingVerification', 'AwaitingApproval', 'Active', 'InReview'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['RescuePlan', 'LiftingPlan', 'Pid', 'Procedures', 'ExternalRa', 'SDS', 'Drawing', 'Certificate', 'Coshh', 'ManualHandlingRa', 'Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //PermitTemplate
      attachWorkItems: {
        isolationtemplate: {
          states: [],
          variants: [],
          forbiddenStates: ['Closing', 'Closed', 'Expired', 'Deisolated', 'DeisolationInProgress'],
          parentStates: ["Requesting","AwaitingVerification"],
          parentVariants: ["*","*"],
          allowedFromAnotherSite: false,
          checkPolicyForAttachment: function(cert, user) {
            return true;
          },
          checkPolicyForParentCertificate: function(_cert, _user) {
            function allowMultipleAttachmentsOfKind(cert, user) {
              if (['PermitTemplate'].indexOf(cert.kind) >= 0 && _.some(cert.attachments, function(attachment) { return attachment.kind === 'IsolationTemplate'; })) {
                return false;
              }
              return true;
            }
            const policies = function (cert, user) {
              if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
                return true;
              }
              if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateVerifier'], cert.site)) {
                return true;
              }
              return false;
            };
            return allowMultipleAttachmentsOfKind(_cert, _user) && policies(_cert, _user);
          },
          initializationTasks: [{"name":"copyParentLocation"},{"name":"copyParentEquipment"},{"name":"copyParentTitle"}]
        }
      },
      //PermitTemplate
      ChangeListedControlMeasureProperties: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      ChangeRiskAssessmentTaskListedHazardProperties: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      ClassifyAreaHazardousness: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      CompleteCertificateWithQuestionnaireRecommendations: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      copyPermit: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        allowCrossSite: true,
      },
      //PermitTemplate
      CorrectPermitIsolationRequirement: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateVerifier'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      CorrectRiskAssessmentTaskDescription: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      CorrectTitle: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      CorrectVariant: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      CreatePermit: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      deleteWorkItem: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateVerifier'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      DescribeWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      disassociateFromIsolationPhase: {
      },
      //PermitTemplate
      DisassociateListedWorkObjectFromWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      DisassociateUnlistedWorkObjectFromWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      IdentifyListedHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      IdentifyNonApplicableHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      IdentifyRiskAssessmentHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      IdentifyRiskAssessmentTask: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      identifyUnlistedHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      IdentifyUnlistedRiskAssessmentControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      IdentifyUnlistedRiskAssessmentHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      managedDescriptorProperties: {
      },
      //PermitTemplate
      MarkAsCopyable: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      MarkControlMeasureAsPrerequisite: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      MarkControlMeasureAsSupplementary: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      multiValueProperties: {
      },
      //PermitTemplate
      RemoveApprovingRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      removeAssignedRoleAuthority: {
      },
      //PermitTemplate
      removeAssignedUserAuthority: {
      },
      //PermitTemplate
      RemoveContractedRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      RemoveControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      RemoveFileAttachment: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'AwaitingVerification', 'AwaitingApproval', 'Active', 'InReview'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      RemoveHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      RemoveIdentifiedRiskAssessmentHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      removeRiskAssessmentControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      RemoveRiskAssessmentTask: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      ReorderRiskAssessmentTasks: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      revertState: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateVerifier'], cert.site)) {
            return true;
          }
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        reasonRequirement: 'Required',
      },
      //PermitTemplate
      SelectListedRiskAssessmentControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      SetReviewDate: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      SuspendPermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //PermitTemplate
      textProperties: {
        "ToolsToBeUsed":
        {
          isAllowed: function (cert, user) {
            if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
        }
      },
      //PermitTemplate
      unlinkWorkItemAttachment : {
        isolationtemplate: {
          states: [],
          variants: [],
          forbiddenStates: [],
          parentStates: ["Requesting","AwaitingVerification"],
          parentVariants: ["*","*"],
          allowedFromAnotherSite: false,
          checkPolicyForAttachment: function(cert, user) {
            return true;
          },
          checkPolicyForParentCertificate: function(_cert, _user) {
            const policies = function (cert, user) {
              if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateRequester'], cert.site)) {
                return true;
              }
              if (_.includes(['AwaitingVerification'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitTemplateVerifier'], cert.site)) {
                return true;
              }
              return false;
            };
            return policies(_cert, _user);
          },
          initializationTasks: []
        }
      },
      //PermitTemplate
      ValidatePermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      }
    },
    RiskRecord: {
      //RiskRecord
      addMeasurements: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['GasTester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        detectorNumberUsage: 'Optional',
      },
      //RiskRecord
      AddPressureMeasurement: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['MechanicalIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //RiskRecord
      assignRoleAuthority: {
      },
      //RiskRecord
      assignUserAuthority: {
      },
      //RiskRecord
      assignWorkingLocations: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['RiskRecordAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //RiskRecord
      assignWorkingPeriod: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['RiskRecordAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        kindsForWhichToIgnoreWorkingHours: 'ManualDataEntry, RiskRecord, ManualBarrierOverride',
      },
      //RiskRecord
      associateWithIsolationPhase: {
      },
      //RiskRecord
      AttachLinkedFile: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'AwaitingApproval', 'Active', 'Revalidate', 'Closing'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //RiskRecord
      AttachUploadedFile: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'AwaitingApproval', 'Active', 'Revalidate', 'Closing'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //RiskRecord
      attachWorkItems: {
      },
      //RiskRecord
      CopyAsTemplate: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingApproval', 'Active', 'Revalidate', 'Closing', 'Closed'], cert.state) && userAuthorization.isInRoleForSite(user, ['RiskRecordAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //RiskRecord
      copyPermit: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['RiskRecordAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        allowCrossSite: true,
      },
      //RiskRecord
      CorrectTitle: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['RiskRecordAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //RiskRecord
      CreatePermit: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['RiskRecordAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //RiskRecord
      DefineLifetimePeriod: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['RiskRecordAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //RiskRecord
      deleteWorkItem: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['RiskRecordAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //RiskRecord
      DescribeWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['RiskRecordAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //RiskRecord
      disassociateFromIsolationPhase: {
      },
      //RiskRecord
      managedDescriptorProperties: {
        "SafeguardSubCategoryField":
        {
          isAllowed: function (cert, user) {
            if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['RiskRecordAuthority'], cert.site)) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
          descriptorType: 'SafeguardSubCategory',
        },
        "CurrentSafeguardStatusField":
        {
          isAllowed: function (cert, user) {
            if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['RiskRecordAuthority'], cert.site)) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
          descriptorType: 'SafeguardStatus',
        }
      },
      //RiskRecord
      MarkAsCopyable: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //RiskRecord
      multiValueProperties: {
      },
      //RiskRecord
      removeAssignedRoleAuthority: {
      },
      //RiskRecord
      removeAssignedUserAuthority: {
      },
      //RiskRecord
      RemoveFileAttachment: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'AwaitingApproval', 'Active', 'Revalidate', 'Closing'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //RiskRecord
      revertState: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingApproval'], cert.state) && userAuthorization.isInRoleForSite(user, ['RiskRecordAuthority', 'RiskRecordApprover'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        reasonRequirement: 'Required',
      },
      //RiskRecord
      SetReviewDate: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //RiskRecord
      SuspendPermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //RiskRecord
      textProperties: {
      },
      //RiskRecord
      unlinkWorkItemAttachment : {
      },
      //RiskRecord
      ValidatePermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      }
    },
    Task: {
      //Task
      AddPressureMeasurement: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['MechanicalIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Task
      assignRoleAuthority: {
      },
      //Task
      AssignTask: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PersonInCharge', 'Assessor', 'AssessmentReviewer'], cert.site)) {
            return true;
          }
          if (_.includes(['Open'], cert.state) && userAuthorization.isInRoleForSite(user, ['PersonInCharge'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Task
      assignUserAuthority: {
      },
      //Task
      associateWithIsolationPhase: {
      },
      //Task
      AttachLinkedFile: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'Open', 'Verify'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //Task
      AttachUploadedFile: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'Open', 'Verify'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //Task
      attachWorkItems: {
      },
      //Task
      ChangeTaskComment: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PersonInCharge', 'Assessor', 'AssessmentReviewer'], cert.site)) {
            return true;
          }
          if (_.includes(['Verify'], cert.state) && userAuthorization.isInRoleForSite(user, ['PersonInCharge'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Task
      CorrectTaskDueDate: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PersonInCharge', 'Assessor', 'AssessmentReviewer'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Task
      CorrectTitle: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PersonInCharge'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Task
      deleteWorkItem: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PersonInCharge'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Task
      DescribeWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PersonInCharge', 'Assessor', 'AssessmentReviewer'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Task
      disassociateFromIsolationPhase: {
      },
      //Task
      managedDescriptorProperties: {
      },
      //Task
      MarkAsCopyable: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Task
      multiValueProperties: {
      },
      //Task
      ProposeTask: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['PersonInCharge'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Task
      ProposeWorkItemTask: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['Assessor', 'AssessmentReviewer'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Task
      removeAssignedRoleAuthority: {
      },
      //Task
      removeAssignedUserAuthority: {
      },
      //Task
      RemoveFileAttachment: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'Open', 'Verify'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Task
      revertState: {
        isAllowed: function (cert, user) {
          if (_.includes(['Open'], cert.state) && userAuthorization.isInRoleForSite(user, ['PersonInCharge'], cert.site)) {
            return true;
          }
          if (_.includes(['Verify'], cert.state) && userAuthorization.isInRoleForSite(user, ['PersonInCharge', 'Assessor', 'AssessmentReviewer'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        reasonRequirement: 'Required',
      },
      //Task
      SetReviewDate: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Task
      SuspendPermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Task
      textProperties: {
        "CommentTask":
        {
          isAllowed: function (cert, user) {
            if (_.includes(['Open'], cert.state) && userMatchesAnyOfAuthorities(['Owner'], cert, user)) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
        }
      },
      //Task
      UnassignTask: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PersonInCharge', 'Assessor', 'AssessmentReviewer'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Task
      unlinkWorkItemAttachment : {
      },
      //Task
      ValidatePermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      }
    },
    TaskRiskAssessment: {
      //TaskRiskAssessment
      addApprovingRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        allowedRoles: 'JHATeamMember',
      },
      //TaskRiskAssessment
      AddContractedRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      AddPressureMeasurement: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['MechanicalIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      AssignInitialRisk: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      AssignResidualRisk: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      assignRoleAuthority: {
      },
      //TaskRiskAssessment
      assignUserAuthority: {
        "ApproverForJHA":
        {
          isAllowed: function (cert, user) {
            if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
        }
      },
      //TaskRiskAssessment
      assignWorkingLocations: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['Requesting', 'DraftShutdown', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingIssue']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      AssociateListedWorkObjectWithWork: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      AssociateUnlistedWorkObjectWithWork: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['Requesting', 'DraftShutdown', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingIssue']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      associateWithIsolationPhase: {
      },
      //TaskRiskAssessment
      AttachLinkedFile: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //TaskRiskAssessment
      AttachUploadedFile: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //TaskRiskAssessment
      attachWorkItems: {
      },
      //TaskRiskAssessment
      ChangeListedControlMeasureProperties: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      ChangeRiskAssessmentTaskListedHazardProperties: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      CorrectRiskAssessmentTaskDescription: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      CorrectTitle: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['Requesting', 'DraftShutdown', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingIssue']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      CorrectVariant: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      CreateRiskAssessment: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      deleteWorkItem: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['AwaitingVerification']) && userAuthorization.isInRoleForSite(user, ['IsolationManager'], cert.site)) {
            return true;
          }
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting']) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      DescribeWork: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          if (cert.hasParentOfKind('Permit') && cert.hasParentInState(['Requesting', 'DraftShutdown', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingIssue']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      disassociateFromIsolationPhase: {
      },
      //TaskRiskAssessment
      DisassociateListedWorkObjectFromWork: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      DisassociateUnlistedWorkObjectFromWork: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      IdentifyNonApplicableHazard: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      IdentifyRiskAssessmentHazard: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      IdentifyRiskAssessmentTask: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      IdentifyUnlistedRiskAssessmentControlMeasure: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      IdentifyUnlistedRiskAssessmentHazard: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      managedDescriptorProperties: {
      },
      //TaskRiskAssessment
      MarkAsCopyable: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      MarkControlMeasureAsPrerequisite: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      MarkControlMeasureAsSupplementary: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      multiValueProperties: {
      },
      //TaskRiskAssessment
      printing: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      RemoveApprovingRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      removeAssignedRoleAuthority: {
      },
      //TaskRiskAssessment
      removeAssignedUserAuthority: {
        "ApproverForJHA":
        {
          isAllowed: function (cert, user) {
            if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
        }
      },
      //TaskRiskAssessment
      RemoveContractedRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      RemoveFileAttachment: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      RemoveIdentifiedRiskAssessmentHazard: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      removeRiskAssessmentControlMeasure: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      RemoveRiskAssessmentTask: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      ReorderRiskAssessmentTasks: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      SelectListedRiskAssessmentControlMeasure: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment']) && _.includes(['Active', 'AwaitingApproval', 'Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      SetReviewDate: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      SuspendPermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      textProperties: {
      },
      //TaskRiskAssessment
      unlinkAndDeleteWorkItem: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('Isolation') && cert.hasParentInState(['Requesting', 'RequestedForAmendment']) && userAuthorization.isInRoleForSite(user, ['ElectricalHighVoltageIsolatingAuthority', 'ElectricalLowVoltageIsolatingAuthority', 'MechanicalIsolatingAuthority', 'InhibitsAndOverridesIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //TaskRiskAssessment
      unlinkWorkItemAttachment : {
      },
      //TaskRiskAssessment
      ValidatePermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      }
    },
    Training: {
      //Training
      addApprovingRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        allowedRoles: 'JHATeamMember',
      },
      //Training
      AddContractedRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      AddControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      AssignInitialRisk: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      AssignResidualRisk: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      assignRiskAssessmentLevel: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        allowMultipleRiskAssessmentTasksFor: 'Level2',
      },
      //Training
      assignRoleAuthority: {
      },
      //Training
      assignUserAuthority: {
      },
      //Training
      assignWorkingLocations: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      assignWorkingPeriod: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      associateWithIsolationPhase: {
      },
      //Training
      AttachLinkedFile: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'Active'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['Training', 'RescuePlan', 'LiftingPlan', 'Pid', 'Procedures', 'ExternalRa', 'SDS', 'Drawing', 'Certificate', 'Coshh', 'ManualHandlingRa', 'Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //Training
      AttachUploadedFile: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'Active'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['Training', 'RescuePlan', 'LiftingPlan', 'Pid', 'Procedures', 'ExternalRa', 'SDS', 'Drawing', 'Certificate', 'Coshh', 'ManualHandlingRa', 'Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //Training
      attachWorkItems: {
        isolation: {
          states: ['Requesting', 'AwaitingVerification', 'AwaitingAuthorisation', 'IsolationInProgress', 'IsolationInPlace', 'RequestedForAmendment', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment', 'IsolationInProgressForAmendment', 'DeisolationInProgress', 'IsolationInPlaceForLongTerm', 'RequestedForSanctionToTest', 'IsolationInPlaceForSanctionToTest', 'RequestedForReisolation', 'Deisolated'],
          variants: [],
          forbiddenStates: [],
          parentStates: ["Requesting"],
          parentVariants: ["*"],
          allowedFromAnotherSite: false,
          checkPolicyForAttachment: function(cert, user) {
            return _.some(['Requesting', 'AwaitingVerification', 'AwaitingAuthorisation', 'IsolationInProgress', 'IsolationInPlace', 'RequestedForAmendment', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment', 'IsolationInProgressForAmendment', 'DeisolationInProgress', 'IsolationInPlaceForLongTerm', 'RequestedForSanctionToTest', 'IsolationInPlaceForSanctionToTest', 'RequestedForReisolation', 'Deisolated'], function(s) {
              return s === cert.state;
            });
          },
          checkPolicyForParentCertificate: function(_cert, _user) {
            function allowMultipleAttachmentsOfKind(cert, user) {
              if ([].indexOf(cert.kind) >= 0 && _.some(cert.attachments, function(attachment) { return attachment.kind === 'Isolation'; })) {
                return false;
              }
              return true;
            }
            const policies = function (cert, user) {
              if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
                return true;
              }
              return false;
            };
            return allowMultipleAttachmentsOfKind(_cert, _user) && policies(_cert, _user);
          },
          initializationTasks: [{"name":"copyParentLocation"},{"name":"copyParentEquipment"},{"name":"copyParentTitle"}]
        }
      },
      //Training
      ChangeListedControlMeasureProperties: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      ChangeRiskAssessmentTaskListedHazardProperties: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      ClassifyAreaHazardousness: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      CompleteCertificateWithQuestionnaireRecommendations: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      copyPermit: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        allowCrossSite: true,
      },
      //Training
      CorrectPermitIsolationRequirement: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      CorrectRiskAssessmentTaskDescription: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      CorrectTitle: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      CorrectVariant: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      CorrectWorkItemSite: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      CreatePermit: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      DefineLifetimePeriod: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Training
      deleteWorkItem: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      DescribeWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      disassociateFromIsolationPhase: {
      },
      //Training
      IdentifyListedHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      IdentifyNonApplicableHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      IdentifyRiskAssessmentHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      IdentifyRiskAssessmentTask: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      identifyUnlistedHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      IdentifyUnlistedRiskAssessmentControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      IdentifyUnlistedRiskAssessmentHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      managedDescriptorProperties: {
      },
      //Training
      MarkAsCopyable: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Training
      MarkAsPlannedInShutdown: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      MarkControlMeasureAsPrerequisite: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      MarkControlMeasureAsSupplementary: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      multiValueProperties: {
        "IsItCritical":
        {
          isAllowed: function (cert, user) {
            if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
        }
      },
      //Training
      printing: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Training
      RemoveApprovingRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      removeAssignedRoleAuthority: {
      },
      //Training
      removeAssignedUserAuthority: {
      },
      //Training
      RemoveContractedRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      RemoveControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      RemoveFileAttachment: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'Active', 'Closing'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      RemoveHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      RemoveIdentifiedRiskAssessmentHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      removeRiskAssessmentControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      RemoveRiskAssessmentTask: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      ReorderRiskAssessmentTasks: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      revertState: {
        isAllowed: function (cert, user) {
          if (_.includes(['Closing'], cert.state) && userAuthorization.isInRoleForSite(user, ['Tester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        reasonRequirement: 'Required',
      },
      //Training
      SelectListedRiskAssessmentControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      SuspendPermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //Training
      textProperties: {
        "Comment1":
        {
          isAllowed: function (cert, user) {
            if (_.includes(['Requesting'], cert.state)) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
        },
        "CriticalComment":
        {
          isAllowed: function (cert, user) {
            if (_.includes(['Requesting'], cert.state)) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
        }
      },
      //Training
      unlinkAndDeleteWorkItem: {
        isAllowed: function (cert, user) {
          if (cert.hasParentOfKind('WorkPack') && cert.hasParentInState(['Requesting', 'RequestedForAmendment']) && _.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //Training
      unlinkWorkItemAttachment : {
        isolation: {
          states: [],
          variants: [],
          forbiddenStates: [],
          parentStates: ["*"],
          parentVariants: ["*"],
          allowedFromAnotherSite: false,
          checkPolicyForAttachment: function(cert, user) {
            return true;
          },
          checkPolicyForParentCertificate: function(_cert, _user) {
            const policies = function (cert, user) {
              if (userAuthorization.isInRoleForSite(user, ['PermitRequester'], cert.site)) {
                return true;
              }
              return false;
            };
            return policies(_cert, _user);
          },
          initializationTasks: []
        }
      },
      //Training
      updatePermitWorkStatus: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
        validStatuses: 'Complete, Incomplete',
      },
      //Training
      ValidatePermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      }
    },
    WorkItemAudit: {
      //WorkItemAudit
      AddPressureMeasurement: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['MechanicalIsolatingAuthority'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkItemAudit
      AnswerQuestion: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['Assessor'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkItemAudit
      AssessAuditAspect: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userMatchesAnyOfAuthorities(['CreatedBy'], cert, user)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkItemAudit
      assignRoleAuthority: {
      },
      //WorkItemAudit
      assignUserAuthority: {
      },
      //WorkItemAudit
      associateWithIsolationPhase: {
      },
      //WorkItemAudit
      AttachLinkedFile: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'AwaitingReview'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['PhotoImage'], attachmentType)) {
          return true;
        }
        return false;
      },
      //WorkItemAudit
      AttachUploadedFile: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'AwaitingReview'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['PhotoImage'], attachmentType)) {
          return true;
        }
        return false;
      },
      //WorkItemAudit
      attachWorkItems: {
      },
      //WorkItemAudit
      deleteWorkItem: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['Assessor'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkItemAudit
      DescribeWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkItemAudit
      disassociateFromIsolationPhase: {
      },
      //WorkItemAudit
      managedDescriptorProperties: {
      },
      //WorkItemAudit
      MarkAsCopyable: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //WorkItemAudit
      multiValueProperties: {
      },
      //WorkItemAudit
      printing: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //WorkItemAudit
      removeAssignedRoleAuthority: {
      },
      //WorkItemAudit
      removeAssignedUserAuthority: {
      },
      //WorkItemAudit
      RemoveFileAttachment: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'AwaitingReview'], cert.state)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkItemAudit
      revertState: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingReview'], cert.state) && userAuthorization.isInRoleForSite(user, ['AssessmentReviewer'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        reasonRequirement: 'Required',
      },
      //WorkItemAudit
      SetReviewDate: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //WorkItemAudit
      StartWorkItemAudit: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['Assessor'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkItemAudit
      SuspendPermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //WorkItemAudit
      textProperties: {
      },
      //WorkItemAudit
      unlinkWorkItemAttachment : {
      },
      //WorkItemAudit
      ValidatePermit: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      }
    },
    WorkPack: {
      //WorkPack
      addApprovingRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.textProperties && _.includes(['Yes'], cert.textProperties.IsRAneeded))) {
            return false;
          }
          return true;
        },
        allowedRoles: 'JHATeamMember',
      },
      //WorkPack
      AddContractedRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      AssignAffectedLocations: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      AssignInitialRisk: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      AssignLocationLesson: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['WorkPackRequester', 'WorkPackAuthoriser'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      AssignPieceOfEquipmentLesson: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['WorkPackRequester', 'WorkPackAuthoriser'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      AssignResidualRisk: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      assignRiskAssessmentLevel: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.textProperties && _.includes(['Yes'], cert.textProperties.IsRAneeded))) {
            return false;
          }
          return true;
        },
        allowMultipleRiskAssessmentTasksFor: 'Level2',
      },
      //WorkPack
      assignRoleAuthority: {
      },
      //WorkPack
      AssignSystemLesson: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['WorkPackRequester', 'WorkPackAuthoriser'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      assignUserAuthority: {
      },
      //WorkPack
      assignWorkingLocations: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      assignWorkingPeriod: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      AssociateListedWorkObjectWithWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      AssociateUnlistedWorkObjectWithWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      associateWithIsolationPhase: {
      },
      //WorkPack
      AttachLinkedFile: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['RescuePlan', 'Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //WorkPack
      AttachUploadedFile: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      canAttachFileType: function(cert, attachmentType) {
        if (_.includes(['RescuePlan', 'Other'], attachmentType)) {
          return true;
        }
        return false;
      },
      //WorkPack
      attachWorkItems: {
        permit: {
          states: ['DraftShutdown', 'Requesting', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingIssue', 'AwaitingActivation', 'Active', 'SuspensionInProgress', 'SuspendedForEmergency', 'Revalidate', 'Expired', 'AwaitingActivationForSanctionToTest', 'ActiveForSanctionToTest', 'SuspendedForRevalidation', 'SuspendedForSanctionToTest'],
          variants: [],
          forbiddenStates: [],
          parentStates: ["Requesting","RequestedForAmendment"],
          parentVariants: ["*"],
          allowedFromAnotherSite: false,
          checkPolicyForAttachment: function(cert, user) {
            return _.some(['DraftShutdown', 'Requesting', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingIssue', 'AwaitingActivation', 'Active', 'SuspensionInProgress', 'SuspendedForEmergency', 'Revalidate', 'Expired', 'AwaitingActivationForSanctionToTest', 'ActiveForSanctionToTest', 'SuspendedForRevalidation', 'SuspendedForSanctionToTest'], function(s) {
              return s === cert.state;
            });
          },
          checkPolicyForParentCertificate: function(_cert, _user) {
            function allowMultipleAttachmentsOfKind(cert, user) {
              if ([].indexOf(cert.kind) >= 0 && _.some(cert.attachments, function(attachment) { return attachment.kind === 'Permit'; })) {
                return false;
              }
              return true;
            }
            const policies = function (cert, user) {
              if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
                return true;
              }
              return false;
            };
            return allowMultipleAttachmentsOfKind(_cert, _user) && policies(_cert, _user);
          },
          initializationTasks: []
        },
        isolation: {
          states: ['Requesting', 'AwaitingVerification', 'AwaitingAuthorisation', 'IsolationInProgress', 'IsolationInPlace', 'RequestedForAmendment', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment', 'IsolationInProgressForAmendment'],
          variants: [],
          forbiddenStates: [],
          parentStates: ["Requesting","RequestedForAmendment"],
          parentVariants: ["*"],
          allowedFromAnotherSite: false,
          checkPolicyForAttachment: function(cert, user) {
            return _.some(['Requesting', 'AwaitingVerification', 'AwaitingAuthorisation', 'IsolationInProgress', 'IsolationInPlace', 'RequestedForAmendment', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment', 'IsolationInProgressForAmendment'], function(s) {
              return s === cert.state;
            });
          },
          checkPolicyForParentCertificate: function(_cert, _user) {
            function allowMultipleAttachmentsOfKind(cert, user) {
              if ([].indexOf(cert.kind) >= 0 && _.some(cert.attachments, function(attachment) { return attachment.kind === 'Isolation'; })) {
                return false;
              }
              return true;
            }
            const policies = function (cert, user) {
              if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
                return true;
              }
              return false;
            };
            return allowMultipleAttachmentsOfKind(_cert, _user) && policies(_cert, _user);
          },
          initializationTasks: []
        },
        nonpermittedwork: {
          states: ['Requesting', 'AwaitingApproval', 'AwaitingActivation', 'Active'],
          variants: [],
          forbiddenStates: [],
          parentStates: ["Requesting","RequestedForAmendment"],
          parentVariants: ["*"],
          allowedFromAnotherSite: false,
          checkPolicyForAttachment: function(cert, user) {
            return _.some(['Requesting', 'AwaitingApproval', 'AwaitingActivation', 'Active'], function(s) {
              return s === cert.state;
            });
          },
          checkPolicyForParentCertificate: function(_cert, _user) {
            function allowMultipleAttachmentsOfKind(cert, user) {
              if ([].indexOf(cert.kind) >= 0 && _.some(cert.attachments, function(attachment) { return attachment.kind === 'NonPermittedWork'; })) {
                return false;
              }
              return true;
            }
            const policies = function (cert, user) {
              if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
                return true;
              }
              return false;
            };
            return allowMultipleAttachmentsOfKind(_cert, _user) && policies(_cert, _user);
          },
          initializationTasks: []
        }
      },
      //WorkPack
      ChangeLessonDescription: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['WorkPackRequester', 'WorkPackAuthoriser'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      ChangeListedControlMeasureProperties: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      ChangeRiskAssessmentTaskListedHazardProperties: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      copyPermit: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        allowCrossSite: true,
      },
      //WorkPack
      CorrectPermitIsolationRequirement: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      CorrectRiskAssessmentTaskDescription: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      CorrectTitle: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      CreateLessonForWorkItem: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['WorkPackRequester', 'WorkPackAuthoriser'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      CreatePermit: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      deleteWorkItem: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      DescribeWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      disassociateFromIsolationPhase: {
      },
      //WorkPack
      DisassociateListedWorkObjectFromWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      DisassociateUnlistedWorkObjectFromWork: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      IdentifyNonApplicableHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      IdentifyRiskAssessmentHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      IdentifyRiskAssessmentTask: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: function (cert) {
          if (!(cert.textProperties && _.includes(['Yes'], cert.textProperties.IsRAneeded))) {
            return false;
          }
          return true;
        },
      },
      //WorkPack
      IdentifyUnlistedRiskAssessmentControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      IdentifyUnlistedRiskAssessmentHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      managedDescriptorProperties: {
      },
      //WorkPack
      MarkAsNotPlannedInShutdown: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      MarkAsPlannedInShutdown: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      MarkControlMeasureAsPrerequisite: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      MarkControlMeasureAsSupplementary: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      multiValueProperties: {
        "IsRAneeded":
        {
          isAllowed: function (cert, user) {
            if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
              return true;
            }
            return false;
          },
          isEnabled: alwaysTrue,
        }
      },
      //WorkPack
      printing: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      },
      //WorkPack
      RemoveApplicableObjectsFromLesson: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['WorkPackRequester', 'WorkPackAuthoriser'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      RemoveApprovingRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      removeAssignedRoleAuthority: {
      },
      //WorkPack
      removeAssignedUserAuthority: {
      },
      //WorkPack
      RemoveContractedRiskAssessmentTeamMember: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      RemoveFileAttachment: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['WorkPackRequester', 'WorkPackAuthoriser'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      RemoveIdentifiedRiskAssessmentHazard: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      RemoveLesson: {
        isAllowed: function (cert, user) {
          if (userAuthorization.isInRoleForSite(user, ['WorkPackRequester', 'WorkPackAuthoriser'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      removeRiskAssessmentControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      RemoveRiskAssessmentTask: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      ReorderAssociatedCertificates: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      ReorderRiskAssessmentTasks: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      revertState: {
        isAllowed: function (cert, user) {
          if (_.includes(['AwaitingActivation', 'AwaitingActivationForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackAuthoriser'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
        reasonRequirement: 'Required',
      },
      //WorkPack
      SelectListedRiskAssessmentControlMeasure: {
        isAllowed: function (cert, user) {
          if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state) && userAuthorization.isInRoleForSite(user, ['WorkPackRequester'], cert.site)) {
            return true;
          }
          return false;
        },
        isEnabled: alwaysTrue,
      },
      //WorkPack
      textProperties: {
      },
      //WorkPack
      unlinkWorkItemAttachment : {
        isolation: {
          states: ['Requesting', 'AwaitingVerification', 'AwaitingAuthorisation', 'IsolationInProgress', 'IsolationInPlace', 'RequestedForAmendment', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment', 'IsolationInProgressForAmendment'],
          variants: [],
          forbiddenStates: [],
          parentStates: ["Requesting","RequestedForAmendment"],
          parentVariants: ["*"],
          allowedFromAnotherSite: false,
          checkPolicyForAttachment: function(cert, user) {
            return _.some(['Requesting', 'AwaitingVerification', 'AwaitingAuthorisation', 'IsolationInProgress', 'IsolationInPlace', 'RequestedForAmendment', 'AwaitingVerificationForAmendment', 'AwaitingAuthorisationForAmendment', 'IsolationInProgressForAmendment'], function(s) {
              return s === cert.state;
            });
          },
          checkPolicyForParentCertificate: function(_cert, _user) {
            const policies = function (cert, user) {
              if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state)) {
                return true;
              }
              return false;
            };
            return policies(_cert, _user);
          },
          initializationTasks: []
        },
        permit: {
          states: ['Requesting', 'DraftShutdown', 'DraftShutdown', 'Requesting', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingIssue', 'AwaitingActivation', 'Active', 'SuspensionInProgress', 'SuspendedForEmergency', 'Revalidate', 'Expired', 'AwaitingActivationForSanctionToTest', 'ActiveForSanctionToTest', 'SuspendedForRevalidation', 'SuspendedForSanctionToTest'],
          variants: [],
          forbiddenStates: [],
          parentStates: ["Requesting","RequestedForAmendment"],
          parentVariants: ["*"],
          allowedFromAnotherSite: false,
          checkPolicyForAttachment: function(cert, user) {
            return _.some(['Requesting', 'DraftShutdown', 'DraftShutdown', 'Requesting', 'AwaitingVerification', 'AwaitingAuthorisation', 'AwaitingIssue', 'AwaitingActivation', 'Active', 'SuspensionInProgress', 'SuspendedForEmergency', 'Revalidate', 'Expired', 'AwaitingActivationForSanctionToTest', 'ActiveForSanctionToTest', 'SuspendedForRevalidation', 'SuspendedForSanctionToTest'], function(s) {
              return s === cert.state;
            });
          },
          checkPolicyForParentCertificate: function(_cert, _user) {
            const policies = function (cert, user) {
              if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state)) {
                return true;
              }
              return false;
            };
            return policies(_cert, _user);
          },
          initializationTasks: []
        },
        nonpermittedwork: {
          states: ['Requesting', 'AwaitingApproval', 'AwaitingActivation', 'Active'],
          variants: [],
          forbiddenStates: [],
          parentStates: ["Requesting","RequestedForAmendment"],
          parentVariants: ["*"],
          allowedFromAnotherSite: false,
          checkPolicyForAttachment: function(cert, user) {
            return _.some(['Requesting', 'AwaitingApproval', 'AwaitingActivation', 'Active'], function(s) {
              return s === cert.state;
            });
          },
          checkPolicyForParentCertificate: function(_cert, _user) {
            const policies = function (cert, user) {
              if (_.includes(['Requesting', 'RequestedForAmendment'], cert.state)) {
                return true;
              }
              return false;
            };
            return policies(_cert, _user);
          },
          initializationTasks: []
        }
      },
      //WorkPack
      ViewDiagram: {
        isAllowed: alwaysTrue,
        isEnabled: alwaysTrue,
      }
    }
  };
  return policies;
})();
